//file:noinspection All
plugins {
    id "net.minecraftforge.gradle.forge" version "ddb1eb0"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "org.spongepowered.mixin" version "d5f9873"
    id "java"
}

version = mod_version
group = mod_group
archivesBaseName = mod_name

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"

    replace('@NAME@', mod_name)
    replace('@VER@': mod_version)
    replace('@ID@', mod_id)

    mappings = "stable_22"
    makeObfSourceJar = false

    clientRunArgs += '--tweakClass xyz.qalcyo.requisite.installer.RequisiteInstaller'
    clientRunArgs += "--mixin mixins.${mod_id}.json"
}

configurations {
    /* Creates an extra dependency configuration that implements `implementation`, */
    /* to be used later to shade libraries. */
    shade
    implementation.extendsFrom(shade)
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = 'Sk1erLLC'
        url = 'https://repo.sk1er.club/repository/maven-releases/'
    }
    maven {
        name = 'Jitpack'
        url = 'https://jitpack.io/'
    }
    maven {
        name = 'Spongepowered'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = 'Qalcyo'
        url = 'http://maven.deftu.xyz/repository/maven-public/'
        allowInsecureProtocol = true
    }
}

dependencies {
    /* If you'd like access to a dependency's source (for example, another mod) use the method below: */
    /* implementation('com.example.package:example:1.0.0') */

    /* If you'd rather like your dependency to be inside your built JAR file, use: */
    /* shade('com.example.package:example:1.0.0') */

    implementation('xyz.qalcyo.requisite:Requisite-1.8.9:2.0-beta6')
    shade('xyz.qalcyo.requisite:RequisiteInstaller-1.8.9:1.3.10')
    shade('gg.essential:vigilance-1.8.9-forge:189')
    implementation annotationProcessor("org.spongepowered:mixin:0.7.11-SNAPSHOT")
}

processResources {
    inputs.property "name", mod_name
    inputs.property "version", mod_version
    inputs.property "id", mod_id
    inputs.property "mcversion", minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        expand(
                "name": mod_name,
                "version": mod_version,
                "id": mod_id,
                "mcversion": minecraft.version
        )
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

jar {
    enabled = false

    manifest.attributes(
            'ModSide': 'CLIENT',
            "ForceLoadAsMod": true,
            "MixinConfigs": "mixins.${mod_id}.json",
            "FMLCorePluginContainsFMLMod": true,
            'TweakClass': 'xyz.qalcyo.requisite.installer.RequisiteInstaller'
    )
}

task moveResources {
    doLast {
        try {
            ant.move file: "${buildDir}/resources/main", todir: "${buildDir}/classes/java"
        } catch (Exception e) {
            e.printStackTrace()
        }
    }
}

shadowJar {
    archiveClassifier.set('')
    configurations = [project.configurations.shade]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude 'LICENSE.md'
    exclude 'pack.mcmeta'
    exclude 'dummyThing'
    exclude '**/module-info.class'
    exclude '*.so'
    exclude '*.dylib'
    exclude '*.dll'
    exclude '*.jnilib'
    exclude 'ibxm/**'
    exclude 'com/jcraft/**'
    exclude 'org/lwjgl/**'
    exclude 'net/java/**'

    exclude 'META-INF/proguard/**'
    exclude 'META-INF/maven/**'
    exclude 'META-INF/versions/**'
    exclude 'META-INF/com.android.tools/**'

    exclude 'fabric.mod.json'
}

mixin {
    disableRefMapWarning = true
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

sourceSets {
    dummy
    main {
        compileClasspath += dummy.output
        ext.refMap = "mixins.${mod_id}.refmap.json"
    }
}

moveResources.dependsOn(processResources)
classes.dependsOn(moveResources)
reobfJar.dependsOn(shadowJar)